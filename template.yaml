AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Complete text processing pipeline - PROJET-3-GROUP-21029-21076-21047-24265'

Parameters:
  ProjectName:
    Type: String
    Default: 'PROJET-3-GROUP-21029-21076-21047-24265'
    Description: 'Project identifier'
  
  NotificationEmail:
    Type: String
    Description: 'Email address for notifications - CHANGE THIS TO YOUR EMAIL'
    Default: '21076@supnum.mr'
    AllowedPattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
    ConstraintDescription: 'Must be a valid email address'

Globals:
  Function:
    Runtime: python3.9
    Timeout: 300
    MemorySize: 512
    Environment:
      Variables:
        LOG_LEVEL: INFO

Resources:
  # DynamoDB Table (using default encryption)
  FileMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-file-metadata-table'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: fileId
          AttributeType: S
        - AttributeName: fileName
          AttributeType: S
      KeySchema:
        - AttributeName: fileId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: FileNameIndex
          KeySchema:
            - AttributeName: fileName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-metadata-table'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: 'text-processing'

  # SNS Topic (using default encryption)
  ProcessingNotifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-processing-notifications'
      DisplayName: 'Text Processing Notifications'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-notifications'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: 'text-processing'

  # SNS Email Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref ProcessingNotifications
      Endpoint: !Ref NotificationEmail

  # Dead Letter Queue (using default encryption)
  ProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-processing-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dlq'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: 'text-processing'

  # S3 Bucket for uploads
  ProcessingBucketUploads:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-uploads-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .md
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-uploads-bucket'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: 'text-processing'

  # Lambda Function (uses src/ folder)
  DataProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-data-processor-function'
      CodeUri: src/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref FileMetadataTable
          SNS_TOPIC: !Ref ProcessingNotifications
          PROJECT_NAME: !Ref ProjectName
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ProcessingDeadLetterQueue.Arn
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ProcessingBucketUploads
        - DynamoDBWritePolicy:
            TableName: !Ref FileMetadataTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProcessingNotifications.TopicName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingDeadLetterQueue.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - comprehend:DetectSentiment
                - comprehend:DetectEntities
                - comprehend:DetectLanguage
                - comprehend:DetectKeyPhrases
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      Tags:
        Name: !Sub '${ProjectName}-data-processor'
        Project: !Ref ProjectName
        Service: 'text-processing'

  # Lambda Permission for S3
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataProcessorFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${ProcessingBucketUploads}/*'

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DataProcessorFunction
      AlarmActions:
        - !Ref ProcessingNotifications
      TreatMissingData: notBreaching

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dlq-messages'
      AlarmDescription: 'Dead Letter Queue messages alarm'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ProcessingDeadLetterQueue.QueueName
      AlarmActions:
        - !Ref ProcessingNotifications
      TreatMissingData: notBreaching

Outputs:
  S3BucketName:
    Description: 'Name of the S3 bucket for uploads'
    Value: !Ref ProcessingBucketUploads
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  DynamoDBTableName:
    Description: 'Name of the DynamoDB table'
    Value: !Ref FileMetadataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref DataProcessorFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  SNSTopicArn:
    Description: 'ARN of the SNS topic'
    Value: !Ref ProcessingNotifications
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopic'

  ProjectInfo:
    Description: 'Project information'
    Value: !Sub '${ProjectName} deployed successfully'
    Export:
      Name: !Sub '${AWS::StackName}-ProjectInfo'

  TestCommand:
    Description: 'Command to test the deployment'
    Value: !Sub 'aws s3 cp test.txt s3://${ProcessingBucketUploads}/'