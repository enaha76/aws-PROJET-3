# # AWSTemplateFormatVersion: '2010-09-09'
# # Description: 'Stage 1: Foundation - KMS Key, DynamoDB Table, SNS Topic, and SQS Queue.'

# # Parameters:
# #   ProjectName:
# #     Type: String
# #     Default: 'PROJET-3'

# # Resources:
# #   KMSKey:
# #     Type: AWS::KMS::Key
# #     Properties:
# #       Description: 'Customer Managed Key for the text processing project'
# #       EnableKeyRotation: true
# #       KeyPolicy:
# #         Version: '2012-10-17'
# #         Statement:
# #           # Rule 1: Gives your main account full control
# #           - Sid: 'AllowRootUserToAdministerKey'
# #             Effect: 'Allow'
# #             Principal:
# #               AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
# #             Action: 'kms:*'
# #             Resource: '*'
# #           # Rule 2 (THE FIX): Gives your pipeline's role full control
# #           - Sid: 'AllowPipelineRoleToManageKey'
# #             Effect: 'Allow'
# #             Principal:
# #               AWS: "arn:aws:iam::242198490044:role/CodePipelineStarterTemplate-Depl-CloudFormationRole-LMdrMLO8ig1I" # <-- IMPORTANT: REPLACE THIS LINE
# #             Action: "kms:*"
# #             Resource: "*"

# #   FileMetadataTable:
# #     Type: AWS::DynamoDB::Table
# #     Properties:
# #       TableName: 'file-metadata-table'
# #       AttributeDefinitions:
# #         - AttributeName: 'fileId'
# #           AttributeType: 'S'
# #       KeySchema:
# #         - AttributeName: 'fileId'
# #           KeyType: 'HASH'
# #       BillingMode: 'PAY_PER_REQUEST'
# #       SSESpecification:
# #         SSEEnabled: true
# #         SSEType: 'KMS'  # <--- THIS LINE IS THE FIX
# #         KMSMasterKeyId: !Ref KMSKey
# #       Tags:
# #         - Key: 'Project'
# #           Value: !Ref ProjectName

# #   ProcessingNotificationTopic:
# #     Type: AWS::SNS::Topic
# #     Properties:
# #       TopicName: 'processing-notifications'
# #       KmsMasterKeyId: !Ref KMSKey
# #       Tags:
# #         - Key: 'Project'
# #           Value: !Ref ProjectName

# #   FailedExecutionsQueue:
# #     Type: AWS::SQS::Queue
# #     Properties:
# #       QueueName: 'processing-dlq'
# #       KmsMasterKeyId: !Ref KMSKey
# #       Tags:
# #         - Key: 'Project'
# #           Value: !Ref ProjectName

# # Outputs:
# #   KMSKeyArn:
# #     Description: 'ARN of the master KMS Key.'
# #     Value: !GetAtt KMSKey.Arn
# #   DynamoDBTableName:
# #     Description: 'Name of the DynamoDB table.'
# #     Value: !Ref FileMetadataTable
# #   SNSTopicArn:
# #     Description: 'ARN of the SNS topic.'
# #     Value: !Ref ProcessingNotificationTopic
# #   DeadLetterQueueArn:
# #     Description: 'ARN of the Dead Letter Queue.'
# #     Value: !GetAtt FailedExecutionsQueue.Arn







# AWSTemplateFormatVersion: '2010-09-09'
# Description: 'Stage 2 of 3: Application Core - S3 Bucket, Lambda Function, and IAM Role.'

# Resources:
#   # --- Foundation Resources (from Stage 1) ---
#   KMSKey:
#     Type: AWS::KMS::Key
#     Properties:
#       Description: 'Customer Managed Key for the text processing project'
#       EnableKeyRotation: true
#       KeyPolicy:
#         Version: '2012-10-17'
#         Statement:
#           - Sid: 'AllowRootUserToAdministerKey'
#             Effect: 'Allow'
#             Principal: { AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root' }
#             Action: 'kms:*'
#             Resource: '*'
      
#   FileMetadataTable:
#     Type: AWS::DynamoDB::Table
#     Properties:
#       TableName: 'file-metadata-table'
#       AttributeDefinitions: [{ AttributeName: 'fileId', AttributeType: 'S' }]
#       KeySchema: [{ AttributeName: 'fileId', KeyType: 'HASH' }]
#       BillingMode: 'PAY_PER_REQUEST'
#       SSESpecification: { SSEEnabled: true, KMSMasterKeyId: !Ref KMSKey }

#   ProcessingNotificationTopic:
#     Type: AWS::SNS::Topic
#     Properties:
#       TopicName: 'processing-notifications'
#       KmsMasterKeyId: !Ref KMSKey

#   FailedExecutionsQueue:
#     Type: AWS::SQS::Queue
#     Properties:
#       QueueName: 'processing-dlq'
#       KmsMasterKeyId: !Ref KMSKey
      
#   # --- Application Core Resources (New in Stage 2) ---
#   S3Bucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: !Sub '${AWS::AccountId}-processing-bucket-uploads'
#       NotificationConfiguration:
#         LambdaConfigurations:
#           - Event: 's3:ObjectCreated:*'
#             Function: !GetAtt DataProcessorFunction.Arn
#       BucketEncryption:
#         ServerSideEncryptionConfiguration:
#           - ServerSideEncryptionByDefault:
#               SSEAlgorithm: 'aws:kms'
#               KMSMasterKeyID: !GetAtt KMSKey.Arn

#   LambdaExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: 'Allow'
#             Principal: { Service: 'lambda.amazonaws.com' }
#             Action: 'sts:AssumeRole'
#       Policies:
#         - PolicyName: 'LambdaPermissions'
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: 'Allow'
#                 Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
#                 Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
#               - Effect: 'Allow'
#                 Action: 's3:GetObject'
#                 Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
#               - Effect: 'Allow'
#                 Action: 'dynamodb:PutItem'
#                 Resource: !GetAtt FileMetadataTable.Arn
#               - Effect: 'Allow'
#                 Action: 'sns:Publish'
#                 Resource: !Ref ProcessingNotificationTopic
#               - Effect: 'Allow'
#                 Action: 'comprehend:DetectSentiment'
#                 Resource: '*'
#               - Effect: 'Allow'
#                 Action: ['kms:Decrypt', 'kms:GenerateDataKey']
#                 Resource: !GetAtt KMSKey.Arn
#               - Effect: 'Allow'
#                 Action: 'sqs:SendMessage'
#                 Resource: !GetAtt FailedExecutionsQueue.Arn

#   DataProcessorFunction:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: 'data-processor-function'
#       Handler: 'lambda_function.lambda_handler'
#       Runtime: 'python3.9'
#       Role: !GetAtt LambdaExecutionRole.Arn
#       # CodePipeline will replace this with your code from src/lambda_function.py
#       Code:
#         ZipFile: " "
#       Environment:
#         Variables:
#           DYNAMODB_TABLE: !Ref FileMetadataTable
#           SNS_TOPIC: !Ref ProcessingNotificationTopic
#           LOG_LEVEL: "INFO"
#       DeadLetterConfig:
#         TargetArn: !GetAtt FailedExecutionsQueue.Arn

#   S3InvokePermission:
#     Type: AWS::Lambda::Permission
#     Properties:
#       FunctionName: !GetAtt DataProcessorFunction.Arn
#       Action: 'lambda:InvokeFunction'
#       Principal: 's3.amazonaws.com'
#       SourceArn: !GetAtt S3Bucket.Arn
#       SourceAccount: !Ref AWS::AccountId






AWSTemplateFormatVersion: '2010-09-09'
Description: 'Final Version: Solves the circular dependency for the complete architecture.'

Resources:
  # --- Foundation Resources ---
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'Customer Managed Key for the text processing project'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowRootUserToAdministerKey'
            Effect: 'Allow'
            Principal: { AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root' }
            Action: 'kms:*'
            Resource: '*'
      
  FileMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'file-metadata-table'
      AttributeDefinitions: [{ AttributeName: 'fileId', AttributeType: 'S' }]
      KeySchema: [{ AttributeName: 'fileId', KeyType: 'HASH' }]
      BillingMode: 'PAY_PER_REQUEST'
      SSESpecification: { SSEEnabled: true, KMSMasterKeyId: !Ref KMSKey }

  ProcessingNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'processing-notifications'
      KmsMasterKeyId: !Ref KMSKey

  FailedExecutionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'processing-dlq'
      KmsMasterKeyId: !Ref KMSKey
      
  # --- Application Core Resources ---
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-processing-bucket-uploads'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt DataProcessorFunction.Arn
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt KMSKey.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal: { Service: 'lambda.amazonaws.com' }
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: 'Allow'
                Action: 'dynamodb:PutItem'
                Resource: !GetAtt FileMetadataTable.Arn
              - Effect: 'Allow'
                Action: 'sns:Publish'
                Resource: !Ref ProcessingNotificationTopic
              - Effect: 'Allow'
                Action: 'comprehend:DetectSentiment'
                Resource: '*'
              - Effect: 'Allow'
                Action: ['kms:Decrypt', 'kms:GenerateDataKey']
                Resource: !GetAtt KMSKey.Arn
              - Effect: 'Allow'
                Action: 'sqs:SendMessage'
                Resource: !GetAtt FailedExecutionsQueue.Arn

  DataProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'data-processor-function'
      Handler: 'lambda_function.lambda_handler'
      Runtime: 'python3.9'
      Role: !GetAtt LambdaExecutionRole.Arn
      # This placeholder code solves the circular dependency
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
            print("Initial deployment. Awaiting code update from pipeline.")
            return {'statusCode': 200, 'body': json.dumps('Placeholder')}
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref FileMetadataTable
          SNS_TOPIC: !Ref ProcessingNotificationTopic
          LOG_LEVEL: "INFO"
      DeadLetterConfig:
        TargetArn: !GetAtt FailedExecutionsQueue.Arn

  S3InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DataProcessorFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceArn: !GetAtt S3Bucket.Arn
      SourceAccount: !Ref AWS::AccountId