AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Complete Event-driven text processing pipeline - PROJET-3-GROUP-21029-21076-21047-24265'

Parameters:
  ProjectName:
    Type: String
    Default: 'PROJET-3-GROUP-21029-21076-21047-24265'
    Description: 'Project identifier'
  
  NotificationEmail:
    Type: String
    Description: 'Email address for notifications - CHANGE THIS TO YOUR EMAIL'
    Default: '21076@supnum.mr'
    AllowedPattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
    ConstraintDescription: 'Must be a valid email address'

  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production']
    Description: 'Environment name'

Globals:
  Function:
    Runtime: python3.9
    Timeout: 300
    MemorySize: 512
    Environment:
      Variables:
        LOG_LEVEL: INFO

Resources:
  # KMS Customer Managed Key for Encryption
  ProcessingKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS key for text processing pipeline encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow services to use the key
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
                - dynamodb.amazonaws.com
                - sns.amazonaws.com
                - lambda.amazonaws.com
                - logs.amazonaws.com
                - sqs.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:ReEncrypt*
              - kms:CreateGrant
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-kms-key'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'text-processing'

  # KMS Key Alias
  ProcessingKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-processing-key'
      TargetKeyId: !Ref ProcessingKMSKey

  # S3 Bucket for file uploads
  ProcessingBucketUploads:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-uploads-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref ProcessingKMSKey
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .md
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-uploads-bucket'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'text-processing'

  # S3 Bucket Policy
  ProcessingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProcessingBucketUploads
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${ProcessingBucketUploads}/*'
              - !Ref ProcessingBucketUploads
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # DynamoDB Table for metadata storage
  FileMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-file-metadata-table'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: fileId
          AttributeType: S
        - AttributeName: fileName
          AttributeType: S
      KeySchema:
        - AttributeName: fileId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: FileNameIndex
          KeySchema:
            - AttributeName: fileName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !Ref ProcessingKMSKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-metadata-table'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'text-processing'

  # SNS Topic for notifications
  ProcessingNotifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-processing-notifications'
      DisplayName: 'Text Processing Notifications'
      KmsMasterKeyId: !Ref ProcessingKMSKey
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-notifications'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'text-processing'

  # SNS Email Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref ProcessingNotifications
      Endpoint: !Ref NotificationEmail

  # Dead Letter Queue (SQS)
  ProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-processing-dlq'
      KmsMasterKeyId: !Ref ProcessingKMSKey
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dlq'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'text-processing'

  # Lambda Function
  DataProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-data-processor-function'
      CodeUri: src/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref FileMetadataTable
          SNS_TOPIC: !Ref ProcessingNotifications
          KMS_KEY_ID: !Ref ProcessingKMSKey
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ProcessingDeadLetterQueue.Arn
      ReservedConcurrencyLimit: 10
      Tracing: Active
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ProcessingBucketUploads
        - DynamoDBWritePolicy:
            TableName: !Ref FileMetadataTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProcessingNotifications.TopicName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingDeadLetterQueue.QueueName
        - KMSDecryptPolicy:
            KeyId: !Ref ProcessingKMSKey
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - comprehend:DetectSentiment
                - comprehend:DetectEntities
                - comprehend:DetectLanguage
                - comprehend:DetectKeyPhrases
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      Tags:
        Name: !Sub '${ProjectName}-data-processor'
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Service: 'text-processing'

  # Lambda Permission for S3
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataProcessorFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${ProcessingBucketUploads}/*'

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DataProcessorFunction}'
      RetentionInDays: 30
      KmsKeyId: !GetAtt ProcessingKMSKey.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-logs'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'text-processing'

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DataProcessorFunction
      AlarmActions:
        - !Ref ProcessingNotifications
      TreatMissingData: notBreaching

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-lambda-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 240000  # 4 minutes in milliseconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DataProcessorFunction
      AlarmActions:
        - !Ref ProcessingNotifications
      TreatMissingData: notBreaching

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dlq-messages'
      AlarmDescription: 'Dead Letter Queue messages alarm'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ProcessingDeadLetterQueue.QueueName
      AlarmActions:
        - !Ref ProcessingNotifications
      TreatMissingData: notBreaching

  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dynamodb-throttles'
      AlarmDescription: 'DynamoDB throttle events alarm'
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref FileMetadataTable
      AlarmActions:
        - !Ref ProcessingNotifications
      TreatMissingData: notBreaching

Outputs:
  S3BucketName:
    Description: 'Name of the S3 bucket for uploads'
    Value: !Ref ProcessingBucketUploads
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  S3BucketRegion:
    Description: 'Region of the S3 bucket'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketRegion'

  DynamoDBTableName:
    Description: 'Name of the DynamoDB table'
    Value: !Ref FileMetadataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref DataProcessorFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt DataProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  SNSTopicArn:
    Description: 'ARN of the SNS topic'
    Value: !Ref ProcessingNotifications
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopic'

  KMSKeyId:
    Description: 'ID of the KMS key'
    Value: !Ref ProcessingKMSKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKey'

  KMSKeyArn:
    Description: 'ARN of the KMS key'
    Value: !GetAtt ProcessingKMSKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  DeadLetterQueueUrl:
    Description: 'URL of the Dead Letter Queue'
    Value: !Ref ProcessingDeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DLQ'

  ProjectInfo:
    Description: 'Project information'
    Value: !Sub '${ProjectName} deployed in ${Environment} environment'
    Export:
      Name: !Sub '${AWS::StackName}-ProjectInfo'